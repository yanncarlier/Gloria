openapi: 3.0.0
info:
  description: |
    This is a sample avatars store server.  You can find
    out more about set-out at
    [http://gloria.set-out.com](http://gloria.set-out.com) 

    https://www.youtube.com/watch?v=VsSBnLGM340

    1. Use JSON
    2. Use Nouns instead of Verbs
    3. Name the collections using Plural Nouns
    4. Use resource nesting
    5. Error Handling
    6. Filtering, sorting, paging, and field selection
    7. Versioning
    8. API Documentation
    9. Using SSL/TLS

    Coletion is a list of somthing...

  version: "0.0.2"
  title: set-out avatars store
  termsOfService: 'http://gloria.set-out.com/terms/'
  contact:
    email: contact@set-out.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: set-out Hub API Auto Mocking
    url: https://virtserver.set-out.com/contactmymop/Gloria/1.0.0
  - url: 'https://avatarsstore.gloria.set-out.com/v2'
tags:
  - name: avatars
    description: Everything about your avatars
    externalDocs:
      description: Find out more
      url: 'http://gloria.set-out.com'
  - name: store
    description: Access to avatars store orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://gloria.set-out.com'
paths:
  /avatars:
    post:
      tags:
        - avatars
      summary: Add a new avatars to the store
      operationId: addavatars
      responses:
        '405':
          description: Invalid input
      security:
        - avatarsstore_auth:
            - 'write:avatars'
            - 'read:avatars'
      requestBody:
        $ref: '#/components/requestBodies/avatars'
    put:
      tags:
        - avatars
      summary: Update an existing avatars
      operationId: updateavatars
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: avatars not found
        '405':
          description: Validation exception
      security:
        - avatarsstore_auth:
            - 'write:avatars'
            - 'read:avatars'
      requestBody:
        $ref: '#/components/requestBodies/avatars'
  /avatars/findByStatus:
    get:
      tags:
        - avatars
      summary: Finds avatars by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findavatarsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/avatars'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/avatars'
        '400':
          description: Invalid status value
      security:
        - avatarsstore_auth:
            - 'write:avatars'
            - 'read:avatars'
  /avatars/findByTags:
    get:
      tags:
        - avatars
      summary: Finds avatars by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use\ \ tag1,
        tag2, tag3 for testing.
      operationId: findavatarsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/avatars'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/avatars'
        '400':
          description: Invalid tag value
      security:
        - avatarsstore_auth:
            - 'write:avatars'
            - 'read:avatars'
      deprecated: true
  '/avatars/{avatarsId}':
    get:
      tags:
        - avatars
      summary: Find avatars by ID
      description: Returns a single avatars
      operationId: getavatarsById
      parameters:
        - name: avatarsId
          in: path
          description: ID of avatars to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/avatars'
            application/xml:
              schema:
                $ref: '#/components/schemas/avatars'
        '400':
          description: Invalid ID supplied
        '404':
          description: avatars not found
      security:
        - api_key: []
    post:
      tags:
        - avatars
      summary: Updates a avatars in the store with form data
      operationId: updateavatarsWithForm
      parameters:
        - name: avatarsId
          in: path
          description: ID of avatars that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - avatarsstore_auth:
            - 'write:avatars'
            - 'read:avatars'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the avatars
                  type: string
                status:
                  description: Updated status of the avatars
                  type: string
    delete:
      tags:
        - avatars
      summary: Deletes a avatars
      operationId: deleteavatars
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: avatarsId
          in: path
          description: avatars id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: avatars not found
      security:
        - avatarsstore_auth:
            - 'write:avatars'
            - 'read:avatars'
  '/avatars/{avatarsId}/uploadImage':
    post:
      tags:
        - avatars
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: avatarsId
          in: path
          description: ID of avatars to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - avatarsstore_auth:
            - 'write:avatars'
            - 'read:avatars'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns avatars inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a avatars
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the avatars
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of avatars that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about set-out
  url: 'http://gloria.set-out.com'
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        avatarsId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    avatars:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: avatars status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: avatars
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    avatars:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/avatars'
        application/xml:
          schema:
            $ref: '#/components/schemas/avatars'
      description: avatars object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    avatarsstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://avatarsstore.gloria.set-out.com/oauth/dialog'
          scopes:
            'write:avatars': modify avatars in your account
            'read:avatars': read your avatars
    api_key:
      type: apiKey
      name: api_key
      in: header